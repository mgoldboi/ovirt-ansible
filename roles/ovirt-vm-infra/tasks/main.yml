---
- block:
  - name: Login to oVirt
    ovirt_auth:
      url: "{{ engine_url }}"
      username: "{{ engine_user }}"
      password: "{{ engine_password }}"
      ca_file: "{{ engine_cafile | default(omit) }}"
      insecure: "{{ engine_insecure | default(true) }}"
    when: ovirt_auth is undefined
    register: loggedin

  - name: Create VMs
    include: create_vms.yml
    with_items: "{{ vms }}"
    loop_control:
      loop_var: "current_vm"

  - name: Wait for VMs to be added
    async_status: "jid={{ item.ansible_job_id }}"
    register: job_result
    with_items: "{{ all_vms }}"
    until: job_result.finished
    retries: "{{ (vm_infra_create_all_timeout|int // vm_infra_create_poll_interval) + 1  }}"
    delay: "{{ vm_infra_create_poll_interval }}"

  - name: Manage disks
    ovirt_disks:
      auth: "{{ ovirt_auth }}"
      name: "{{ item.0.name }}_{{ item.1.name }}"
      vm_name: "{{ item.0.name }}"
      size: "{{ item.1.size | default(omit) }}"
      format: "{{ item.1.format | default(omit) }}"
      storage_domain: "{{ item.1.storage_domain | default(omit) }}"
      interface: "{{ item.1.interface | default(omit) }}"
      bootable: "{{ item.1.bootable | default(omit) }}"
      wait: true
    with_subelements:
      - "{{ vms }}"
      - "profile.disks"
      - flags:
        skip_missing: true
  
  - name: Manage NICs
    ovirt_nics:
      auth: "{{ ovirt_auth }}"
      vm: "{{ item.0.name }}"
      name: "{{ item.1.name | default(omit) }}"
      interface: "{{ item.1.interface | default(omit) }}"
      mac_address: "{{ item.1.mac_address | default(omit) }}"
      profile: "{{ item.1.profile | default(omit) }}"
      network: "{{ item.1.network | default(omit) }}" 
    with_subelements:
      - "{{ vms }}"
      - "profile.nics"
      - flags:
        skip_missing: true

  - name: Manage VMs state
    include: manage_state.yml
    with_items: "{{ vms }}"
    loop_control:
      loop_var: "current_vm"

  - name: Wait for VMs to be started
    no_log: "{{ not debug_vm_create }}"
    async_status: "jid={{ item.ansible_job_id }}"
    register: job_result
    with_items: "{{ started_vms }}"
    until: job_result.finished
    retries: "{{ (vm_infra_create_all_timeout|int // vm_infra_create_poll_interval) + 1  }}"
    delay: "{{ vm_infra_create_poll_interval }}"

  - name: Tag VMs
    ovirt_tags:
      auth: "{{ ovirt_auth }}"
      name: "{{ item }}"
      vms: "{{ vms|json_query(query)|map(attribute='name') | list }}"
    when: "item != '[Undefined]'" # If not specified tag for VM ignore.
    with_items:
      - "{{ vms | map(attribute='tag') | list | unique }}"
    vars:
      query: "[?tag=='{{ item }}']"

  - name: Apply any Affinity Groups
    include_role:
      name: ovirt-affinity-groups

  - name: Wait for VMs IP
    ovirt_vms_facts:
      auth: "{{ ovirt_auth }}"
      pattern: "name={{ item.name }}"
      fetch_nested: true
      nested_attributes: ips
    with_items:
      - "{{ vms }}"
    until: "ovirt_vms | first | json_query(query) | length > 0"
    retries: "{{ vm_infra_wait_for_ip_retries }}"
    delay: "{{ vm_infra_wait_for_ip_delay }}"
    when: "wait_for_ip"
    vars:
      query: "reported_devices[*].ips[*].address"

  - name: Add vms to inventory groups
    add_host:
      hostname: "{{ item.name }}"
      ansible_host: "{{ item | ovirtvmipv4 }}"
      ansible_user: root
      ansible_password: redhat
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    with_items:
      - "{{ vms }}"
    until: "ovirt_vms | first | json_query(query) | length > 0"

  always:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when: not loggedin.skipped | default(false)
